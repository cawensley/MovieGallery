{"version":3,"sources":["images/imageBlank.jpg","Redux/reducers/combinedReducers.js","Redux/reducers/favorites.js","Redux/reducers/movie.js","Redux/reducers/page.js","Redux/reducers/results.js","Redux/reducers/search.js","Redux/store.js","Redux/actions/PageChange.js","organisms/MainNavBar.jsx","Redux/actions/SearchChange.js","atoms/pageTitle.jsx","atoms/movieAPI.js","atoms/pageLoading.jsx","Redux/actions/FavoritesChange.js","molecules/AddRemoveButton.jsx","molecules/card.jsx","Redux/actions/MovieChange.js","molecules/cardlist.jsx","pages/favorites.jsx","pages/home.jsx","Redux/actions/ResultsChange.js","pages/details.jsx","organisms/footer.jsx","atoms/particleOptions.js","App.jsx","index.jsx"],"names":["module","exports","combineReducers","favorites","state","JSON","parse","localStorage","getItem","action","type","payload","movie","page","results","search","store","createStore","PageChange","Page","setItem","MainNavBar","userInput","useRef","getState","newSearch","inputString","dispatch","current","window","location","hash","reload","className","data-toggle","data-target","id","to","placeholder","size","onChange","event","target","value","onKeyPress","key","onClick","PageTitle","Title","defaultProps","movieAPI","PageLoading","FavoritesChange","movieArray","stringify","AddRemoveButton","useState","isLoading","setisLoading","FavMovieArray","isFavMovie","i","length","imdbID","splice","onMovieRemove","a","async","fetch","then","response","json","rawData","MovietoAdd","Year","Type","Poster","push","addMovietoArray","Card","DisplayPoster","require","movieID","alt","src","href","rel","Cardlist","movies","map","user","Favorites","useEffect","scrollTo","Home","moviestoDisplay","setmoviestoDisplay","PageArray","setPageArray","TotalResults","setTotalResults","FetchSuccess","setFetchSuccess","SearchTerm","filteredMovies","setfilteredMovies","filterTerm","filterType","UniqueRemovals","getmovieData","totalResults","wasFetchSuccess","Response","TotalPages","Math","ceil","TotalPagesArray","PagestoFetch","TotalFetches","z","TotalMoviestoDisplay","moviepromises","data","Search","singlemovie","Promise","all","UniqueMovieIDs","UniqueMoviesArray","filter","onFilterChange","FilteredMovieArray2","toLowerCase","includes","htmlFor","item","Results","Details","movieIDtoDisplay","movietoDisplay","setmovietoDisplay","PosterImage","setPosterImage","Released","Runtime","Rated","Genre","Director","Writer","Actors","imdbRating","Plot","Footer","currentYear","Date","getFullYear","toString","particleOptions","particles","number","density","enable","value_area","App","params","path","component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1d2f78f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imageBlank.dcb16180.jpg\";","import { combineReducers } from 'redux';\nimport favorites from './favorites';\nimport movie from './movie';\nimport page from './page';\nimport results from './results';\nimport search from './search';\n\nexport default combineReducers({\n  favorites, movie, page, results, search,\n});\n","export default function favorites(state = JSON.parse(localStorage.getItem('FavoriteArray')) || [], action) {\n  if (action.type === 'Favorites_Change') {\n    return action.payload;\n  }\n  return state;\n}\n","export default function movie(state = localStorage.getItem('Movieselected') || null, action) {\n  if (action.type === 'Movie_Change') {\n    return action.payload;\n  }\n  return state;\n}\n","export default function page(state = localStorage.getItem('Pageselected') || 1, action) {\n  if (action.type === 'Page_Change') {\n    return action.payload;\n  }\n  return state;\n}\n","export default function results(state = localStorage.getItem('Resultsselected') || 10, action) {\n  if (action.type === 'Results_Change') {\n    return action.payload;\n  }\n  return state;\n}\n","export default function search(state = localStorage.getItem('Searchstring') || '', action) {\n  if (action.type === 'Search_Change') {\n    return action.payload;\n  }\n  return state;\n}\n","import { createStore } from 'redux';\nimport combineReducers from './reducers/combinedReducers';\n\nconst store = createStore(combineReducers);\n\nexport default store;\n","export default function PageChange(Page) {\n  localStorage.setItem('Pageselected', Page);\n  return { type: 'Page_Change', payload: Page };\n}\n","import { Link } from 'react-router-dom';\nimport React, { useRef } from 'react';\nimport './MainNavBar.scss';\nimport store from '../Redux/store';\nimport PageChange from '../Redux/actions/PageChange';\nimport SearchChange from '../Redux/actions/SearchChange';\n\nconst MainNavBar = () => {\n  const userInput = useRef(store.getState().search || 'Star Wars');\n\n  function newSearch() {\n    store.dispatch(PageChange(1));\n    store.dispatch(SearchChange(userInput.current));\n    window.location.hash = '/';\n    window.location.reload();\n  }\n\n  return (\n    <nav className=\"navbar navbar-expand-sm bg-dark fixed-top p-1\">\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarResponsive\">\n        <span className=\"text-white\"><i className=\"fas fa-bars\" /></span>\n      </button>\n\n      <div className=\"collapse navbar-collapse\" id=\"navbarResponsive\">\n        <ul className=\"navbar-nav\">\n          <li className=\"navbar-brand\">\n            <Link to=\"/\" className=\"nav-link px-3 py-1\">Movie Gallery</Link>\n          </li>\n          <li className=\"navbar-brand\">\n            <Link to=\"/favorites\" className=\"nav-link px-3 py-1\">Favorites</Link>\n          </li>\n        </ul>\n      </div>\n      <input\n        type=\"text\"\n        placeholder=\"Enter a movie title\"\n        className=\"font-weight-bold\"\n        size=\"17\"\n        onChange={(event) => {\n          userInput.current = event.target.value;\n        }}\n        onKeyPress={(event) => {\n          if (event.key === 'Enter') { newSearch(); }\n        }}\n      />\n      <button\n        type=\"submit\"\n        value=\"Submit\"\n        className=\"btn btn-primary btn-sm ml-2\"\n        onClick={() => newSearch()}\n      >\n            Title Search\n      </button>\n    </nav>\n  );\n};\n\nexport default MainNavBar;\n","export default function SearchChange(inputString) {\n  localStorage.setItem('Searchstring', inputString);\n  return { type: 'Search_Change', payload: inputString };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst PageTitle = ({ Title }) => <h1 className=\"text-white pb-3\"><u>{Title}</u></h1>;\n\nPageTitle.propTypes = {\n  Title: PropTypes.string,\n};\n\nPageTitle.defaultProps = {\n  Title: null,\n};\n\nexport default PageTitle;\n","const movieAPI = 'bf0372ee';\n\nexport default movieAPI;\n","import React from 'react';\n\nconst PageLoading = () => (\n  <p className=\"container-fluid p-padding text-center text-white\">\n    <i className=\"fas fa-5x fa-cog fa-spin\" />\n  </p>\n);\n\nexport default PageLoading;\n","export default function FavoritesChange(movieArray) {\n  localStorage.setItem('FavoriteArray', JSON.stringify(movieArray));\n  return { type: 'Favorites_Change', payload: movieArray };\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport movieAPI from '../atoms/movieAPI';\nimport PageLoading from '../atoms/pageLoading';\nimport FavoritesChange from '../Redux/actions/FavoritesChange';\nimport store from '../Redux/store';\n\nconst AddRemoveButton = ({ id }) => {\n  const [isLoading, setisLoading] = useState(false);\n  const FavMovieArray = store.getState().favorites;\n\n  let isFavMovie = false;\n  for (let i = 0; i < FavMovieArray.length; i += 1) {\n    if (id === FavMovieArray[i].imdbID) { isFavMovie = true; }\n  }\n\n  function onMovieAdd() {\n    setisLoading(true);\n    async function addMovietoArray() {\n      const rawData = await fetch(`https://www.omdbapi.com/?i=${id}&apikey=${movieAPI}`)\n        .then((response) => response.json());\n      const MovietoAdd = {\n        Title: rawData.Title,\n        Year: rawData.Year,\n        imdbID: rawData.imdbID,\n        Type: rawData.Type,\n        Poster: rawData.Poster,\n      };\n      FavMovieArray.push(MovietoAdd);\n      store.dispatch(FavoritesChange(FavMovieArray));\n      setisLoading(false);\n    }\n    addMovietoArray();\n  }\n\n  function onMovieRemove() {\n    for (let i = 0; i < FavMovieArray.length; i += 1) {\n      if (id === FavMovieArray[i].imdbID) { FavMovieArray.splice(i, 1); }\n    }\n    store.dispatch(FavoritesChange(FavMovieArray));\n    window.location.reload(true);\n  }\n\n  if (isLoading) { return (<PageLoading />); }\n\n  return (!isFavMovie) ? (\n    <button\n      type=\"submit\"\n      value=\"Submit\"\n      className=\"btn btn-success m-4\"\n      onClick={() => onMovieAdd()}\n    >\n                    Add to Favorites\n    </button>\n  ) : (\n    <button\n      type=\"submit\"\n      value=\"Submit\"\n      className=\"btn btn-danger m-4\"\n      onClick={() => onMovieRemove()}\n    >\n                    Remove From Favorites\n    </button>\n  );\n};\n\nAddRemoveButton.propTypes = {\n  id: PropTypes.string,\n};\n\nAddRemoveButton.defaultProps = {\n  id: null,\n};\n\nexport default AddRemoveButton;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './card.scss';\nimport { Link } from 'react-router-dom';\nimport MovieChange from '../Redux/actions/MovieChange';\nimport AddRemoveButton from './AddRemoveButton';\nimport store from '../Redux/store';\n\nconst Card = ({\n  Title, Year, imdbID, Type, Poster,\n}) => {\n  let DisplayPoster = `${Poster}`;\n  if (DisplayPoster === 'N/A') { DisplayPoster = require('../images/imageBlank.jpg'); }\n\n  return (\n    <div className=\"card d-inline-flex m-card-width m-card-hover m-1 bg-dark\">\n      <Link to=\"/details\" onClick={() => store.dispatch(MovieChange(`${imdbID}`))}>\n        <img className=\"m-cardimg-height w-100\" alt=\"Error Loading\" src={DisplayPoster} />\n        <div className=\"card-body\">\n          <h5 className=\"card-title text-warning\">{Title}</h5>\n          <p className=\"card-text text-light\">\nYear:\n            {Year}\n          </p>\n          <p className=\"card-text text-light\">\nType:\n            {Type}\n          </p>\n        </div>\n      </Link>\n      <a\n        href={`https://www.imdb.com/title/${imdbID}/`}\n        rel=\"noopener noreferrer\"\n        target=\"_blank\"\n        className=\"m-cardhyperLink-color\"\n      >\nImdb ID:\n        {' '}\n        {imdbID}\n      </a>\n      <AddRemoveButton id={imdbID} />\n    </div>\n  );\n};\n\nCard.propTypes = {\n  Title: PropTypes.string,\n  Year: PropTypes.string,\n  imdbID: PropTypes.string,\n  Type: PropTypes.string,\n  Poster: PropTypes.string,\n};\n\nCard.defaultProps = {\n  Title: null,\n  Year: null,\n  imdbID: null,\n  Type: null,\n  Poster: null,\n};\n\nexport default Card;\n","export default function MovieChange(movieID) {\n  localStorage.setItem('Movieselected', movieID);\n  return { type: 'Movie_Change', payload: movieID };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Card from './card';\n\nconst Cardlist = ({ movies }) => (\n  <div>\n    {\n        movies.map((user, i) => (\n          <Card\n            key={movies[i].imdbID}\n            Title={movies[i].Title}\n            Year={movies[i].Year}\n            imdbID={movies[i].imdbID}\n            Type={movies[i].Type}\n            Poster={movies[i].Poster}\n          />\n        ))\n      }\n  </div>\n);\n\nCardlist.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.shape({\n    Title: PropTypes.string,\n    Year: PropTypes.string,\n    imdbID: PropTypes.string,\n    Type: PropTypes.string,\n    Poster: PropTypes.string,\n  })),\n};\n\nCardlist.defaultProps = {\n  movies: null,\n};\n\nexport default Cardlist;\n","import React, { useEffect } from 'react';\nimport PageTitle from '../atoms/pageTitle';\nimport Cardlist from '../molecules/cardlist';\nimport store from '../Redux/store';\n\nconst Favorites = () => {\n  // eslint-disable-next-line\n    useEffect (()=> {window.scrollTo(0,0)},[]);\n\n  return (store.getState().favorites.length === 0) ? (\n    <div className=\"container-fluid p-padding text-center\">\n      <PageTitle Title=\"Favorite Movies\" />\n      <h2 className=\"text-warning\">No Favorites Stored</h2>\n    </div>\n  ) : (\n    <div className=\"container-fluid p-padding text-center\">\n      <PageTitle Title=\"Favorite Movies\" />\n      <Cardlist movies={store.getState().favorites} />\n    </div>\n  );\n};\n\nexport default Favorites;\n","import React, { useState, useEffect, useRef } from 'react';\nimport Cardlist from '../molecules/cardlist';\nimport movieAPI from '../atoms/movieAPI';\nimport PageLoading from '../atoms/pageLoading';\nimport PageChange from '../Redux/actions/PageChange';\nimport ResultsChange from '../Redux/actions/ResultsChange';\nimport store from '../Redux/store';\n\nconst Home = () => {\n  const [moviestoDisplay, setmoviestoDisplay] = useState('');\n  const [PageArray, setPageArray] = useState([1]);\n  const ResultsArray = [10, 20, 50];\n  const [TotalResults, setTotalResults] = useState();\n  const [FetchSuccess, setFetchSuccess] = useState(false);\n  const [isLoading, setisLoading] = useState(false);\n  const SearchTerm = useRef(store.getState().search || 'Star Wars');\n  const [filteredMovies, setfilteredMovies] = useState([]);\n  const filterTerm = useRef('');\n  const TypeFilterArray = ['movie', 'series', 'game'];\n  const filterType = useRef('');\n  const UniqueRemovals = useRef(0);\n\n  async function getmovieData() {\n    setisLoading(true);\n    const rawData = await fetch(`https://www.omdbapi.com/?s=${SearchTerm.current}&apikey=${movieAPI}`)\n      .then((response) => response.json());\n    setTotalResults(rawData.totalResults);\n\n    const wasFetchSuccess = (rawData.Response === 'True');\n    setFetchSuccess(wasFetchSuccess);\n\n    const TotalPages = Math.ceil(rawData.totalResults / store.getState().results);\n    const TotalPagesArray = [];\n    for (let i = 1; i <= TotalPages; i += 1) { TotalPagesArray.push(i); }\n    setPageArray(TotalPagesArray);\n\n    const PagestoFetch = [];\n    const TotalFetches = Math.ceil(rawData.totalResults / 10);\n    for (let z = (store.getState().page - 1) * (store.getState().results / 10) + 1;\n      z <= (store.getState().page * store.getState().results) / 10; z += 1) {\n      if (z <= TotalFetches) { PagestoFetch.push(z); }\n    }\n\n    const TotalMoviestoDisplay = [];\n    const moviepromises = PagestoFetch.map((value) => {\n      const moviebatch = fetch(`https://www.omdbapi.com/?s=${SearchTerm.current}&page=${value}&apikey=${movieAPI}`)\n        .then((response) => response.json())\n        .then((data) => data.Search.map((singlemovie) => TotalMoviestoDisplay.push(singlemovie)));\n      return (moviebatch);\n    });\n    await Promise.all(moviepromises);\n\n    const UniqueMovieIDs = {};\n    const UniqueMoviesArray = TotalMoviestoDisplay.filter((movie) => {\n      if (UniqueMovieIDs[movie.imdbID]) return false;\n      UniqueMovieIDs[movie.imdbID] = true;\n      return true;\n    });\n    UniqueRemovals.current = TotalMoviestoDisplay.length - UniqueMoviesArray.length;\n\n    filterTerm.current = '';\n    filterType.current = '';\n    setmoviestoDisplay(UniqueMoviesArray);\n    setfilteredMovies(UniqueMoviesArray);\n    setisLoading(false);\n  }\n\n  // eslint-disable-next-line\n    useEffect (()=> {getmovieData(); window.scrollTo(0,0)},[]);\n\n  function onFilterChange() {\n    const FilteredMovieArray1 = moviestoDisplay.filter(\n      (movie) => movie.Title.toLowerCase().includes(filterTerm.current),\n    );\n    const FilteredMovieArray2 = FilteredMovieArray1.filter(\n      (movie) => movie.Type.includes(filterType.current),\n    );\n    setfilteredMovies(FilteredMovieArray2);\n  }\n\n  if (isLoading) { return (<PageLoading />); }\n\n  return (!moviestoDisplay || !FetchSuccess) ? (\n    <div className=\"container-fluid p-padding text-center\">\n      <div className=\"h3 text-white pb-2\">{`No results returned for \"${SearchTerm.current}\"`}</div>\n    </div>\n  ) : (\n    <div className=\"container-fluid p-padding text-center\">\n      <div className=\"row\">\n        <div className=\"col-xl-3\" />\n        <div className=\"col-xl-3 col-md-6\">\n          <div className=\"h3 text-white pb-2\">{`${TotalResults} results for \"${SearchTerm.current}\"`}</div>\n          <h6 className=\"text-white mt-2\">Filter Title By:</h6>\n          <input\n            type=\"search\"\n            placeholder=\"Enter filter term\"\n            className=\"h6\"\n            onChange={(event) => {\n              filterTerm.current = event.target.value.toLowerCase();\n              onFilterChange();\n            }}\n          />\n          <br />\n          <label htmlFor=\"FilterType\" className=\"text-white h6\">\nFilter Type By:\n            <select\n              id=\"FilterType\"\n              className=\"my-2\"\n              value={filterType.current}\n              onChange={(event) => {\n                filterType.current = event.target.value;\n                onFilterChange();\n              }}\n            >\n              <option key=\"\" value=\"\">Show All</option>\n              {TypeFilterArray.map((item) => (<option key={item} value={item}>{item}</option>))}\n            </select>\n          </label>\n        </div>\n        <div className=\"col-xl-3 col-md-6 text-md-left\">\n          <p className=\"text-warning\">\nTotal Pages:\n            {' '}\n            {PageArray.length}\n          </p>\n          <label htmlFor=\"ResultsperPage\" className=\"text-warning\">\nResults per Page:\n            <select\n              id=\"ResultsperPage\"\n              className=\"ml-1\"\n              value={store.getState().results}\n              onChange={(event) => {\n                store.dispatch(PageChange(1));\n                store.dispatch(ResultsChange(event.target.value));\n                getmovieData();\n              }}\n            >\n              {ResultsArray.map((item) => (<option key={item} value={item}>{item}</option>))}\n            </select>\n          </label>\n          <br />\n          <label htmlFor=\"PageSelection\" className=\"text-warning\">\n            {' '}\nPage:\n            <select\n              id=\"PageSelection\"\n              className=\"ml-1 my-2\"\n              value={store.getState().page}\n              onChange={(event) => {\n                store.dispatch(PageChange(event.target.value));\n                getmovieData();\n              }}\n            >\n              {PageArray.map((item) => (<option key={item} value={item}>{item}</option>))}\n            </select>\n          </label>\n          <p className=\"text-warning\">\n                Duplicate Results Removed:\n            {' '}\n            {UniqueRemovals.current}\n          </p>\n        </div>\n        <div className=\"col-xl-3\" />\n      </div>\n      <Cardlist movies={filteredMovies} />\n    </div>\n  );\n};\n\nexport default Home;\n","export default function ResultsChange(Results) {\n  localStorage.setItem('Resultsselected', Results);\n  return { type: 'Results_Change', payload: Results };\n}\n","import React, { useState, useEffect } from 'react';\nimport movieAPI from '../atoms/movieAPI';\nimport PageTitle from '../atoms/pageTitle';\nimport './details.scss';\nimport PageLoading from '../atoms/pageLoading';\nimport AddRemoveButton from '../molecules/AddRemoveButton';\nimport store from '../Redux/store';\n\nconst Details = () => {\n  const movieIDtoDisplay = store.getState().movie;\n  const [movietoDisplay, setmovietoDisplay] = useState(null);\n  const [isLoading, setisLoading] = useState(false);\n  const [PosterImage, setPosterImage] = useState(require('../images/imageBlank.jpg'));\n\n  async function getmovieData() {\n    setisLoading(true);\n    const rawData = await fetch(`https://www.omdbapi.com/?i=${movieIDtoDisplay}&apikey=${movieAPI}`)\n      .then((response) => response.json());\n    setmovietoDisplay(rawData);\n    if (rawData.Poster !== 'N/A') { setPosterImage(rawData.Poster); }\n    setisLoading(false);\n  }\n\n  // eslint-disable-next-line\n    useEffect (()=> {getmovieData(); window.scrollTo(0,0)},[]);\n\n  if (isLoading) { return (<PageLoading />); }\n\n  return (!movietoDisplay || !movieIDtoDisplay) ? (\n    <div className=\"container-fluid p-padding text-center\">\n      <PageTitle Title=\"Movie Details\" />\n      <h2 className=\"text-warning\">No Movie to Display</h2>\n    </div>\n  ) : (\n    <div className=\"container-fluid p-padding text-center \">\n      <PageTitle Title=\"Movie Details\" />\n      <img className=\"p-movieimage-height p-movieimage-width bg-dark\" alt=\"Error Loading\" src={PosterImage} />\n      <br />\n      <AddRemoveButton id={movietoDisplay.imdbID} />\n      <div className=\"row justify-content-center \">\n        <table className=\"table table-striped table-bordered text-white my-4 col-md-10 col-lg-6 bg-secondary\">\n          <tbody>\n            <tr className=\"h5 text-warning\">\n              <td className=\"align-middle\">Title:</td>\n              <td>{movietoDisplay.Title}</td>\n            </tr>\n            <tr className=\"h6\">\n              <td>Type:</td>\n              <td>{movietoDisplay.Type}</td>\n            </tr>\n            <tr className=\"h6\">\n              <td>Released:</td>\n              <td>{movietoDisplay.Released}</td>\n            </tr>\n            <tr className=\"h6\">\n              <td>Runtime:</td>\n              <td>{movietoDisplay.Runtime}</td>\n            </tr>\n            <tr className=\"h6\">\n              <td>Rated:</td>\n              <td>{movietoDisplay.Rated}</td>\n            </tr>\n            <tr className=\"h6\">\n              <td>Genre:</td>\n              <td>{movietoDisplay.Genre}</td>\n            </tr>\n            <tr className=\"h6\">\n              <td className=\"align-middle\">Director(s):</td>\n              <td>{movietoDisplay.Director}</td>\n            </tr>\n            <tr className=\"h6\">\n              <td className=\"align-middle\">Writer(s):</td>\n              <td>{movietoDisplay.Writer}</td>\n            </tr>\n            <tr className=\"h6\">\n              <td className=\"align-middle\">Actor(s):</td>\n              <td>{movietoDisplay.Actors}</td>\n            </tr>\n            <tr className=\"h6\">\n              <td>imdb ID:</td>\n              <td>\n                <a\n                  href={`https://www.imdb.com/title/${movietoDisplay.imdbID}/`}\n                  className=\"p-hyperLink-color\"\n                  rel=\"noopener noreferrer\"\n                  target=\"_blank\"\n                >\n                  {movietoDisplay.imdbID}\n                </a>\n              </td>\n            </tr>\n            <tr className=\"h6\">\n              <td>imdb Rating:</td>\n              <td className=\"align-middle\">{movietoDisplay.imdbRating}</td>\n            </tr>\n            <tr className=\"h6\">\n              <td className=\"align-middle\">Plot:</td>\n              <td>{movietoDisplay.Plot}</td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default Details;\n","import React from 'react';\n\nconst Footer = () => {\n  const currentDate = new Date();\n  const currentYear = currentDate.getFullYear();\n\n  return (\n    <div className=\"bg-dark fixed-bottom text-center text-white\">\nCopyright &copy; Movie Gallery Website\n      {' '}\n      {currentYear.toString()}\n    </div>\n  );\n};\n\nexport default Footer;\n","const particleOptions = {\n  particles: {\n    number: {\n      value: 80,\n      density: {\n        enable: true,\n        value_area: 800,\n      },\n    },\n  },\n};\n\nexport default particleOptions;\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route } from 'react-router-dom';\nimport Particles from 'react-particles-js';\nimport MainNavBar from './organisms/MainNavBar';\nimport Favorites from './pages/favorites';\nimport Home from './pages/home';\nimport Details from './pages/details';\nimport Footer from './organisms/footer';\nimport particleOptions from './atoms/particleOptions';\n\nconst App = () => (\n  <Router>\n    <Particles className=\"p-particles\" params={particleOptions} />\n    <MainNavBar />\n    <Switch>\n      <Route path=\"/details\" component={Details} />\n      <Route path=\"/favorites\" component={Favorites} />\n      <Route path=\"/\" component={Home} />\n    </Switch>\n    <Footer />\n  </Router>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}